# -*- coding: utf-8 -*-
"""exp17.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GESnC_fxVds0ERtSUlyIIYGSpEs6SjGm
"""

import numpy as np

class Environment:
    def __init__(self):
        self.state = 0
        self.actions = [0, 1]  # Two possible actions

    def reset(self):
        self.state = 0
        return self.state

    def step(self, action):
        if self.state == 0 and action == 0:
            reward = 1
            next_state = 1
        elif self.state == 0 and action == 1:
            reward = 0
            next_state = 0
        else:
            raise ValueError("Invalid state-action pair")

        self.state = next_state
        return next_state, reward

class Train:
    def __init__(self, algorithm):
        self.algorithm = algorithm
        self.q_table = np.zeros((2, 2))  # Q-table with 2 states and 2 actions
        self.alpha = 0.1  # Learning rate

    def choose_action(self, state):
        if np.random.rand() < 0.5:
            return np.argmax(self.q_table[state])
        else:
            return np.random.choice([0, 1])

    def update_q_table(self, state, action, reward, next_state):
        if self.algorithm == "TD(0)":
            self.q_table[state, action] += self.alpha * (reward + np.max(self.q_table[next_state]) - self.q_table[state, action])
        elif self.algorithm == "SARSA":
            next_action = self.choose_action(next_state)
            self.q_table[state, action] += self.alpha * (reward + self.q_table[next_state, next_action] - self.q_table[state, action])
        elif self.algorithm == "Q-Learning":
            self.q_table[state, action] += self.alpha * (reward + np.max(self.q_table[next_state]) - self.q_table[state, action])

def train(train):
    env = Environment()
    total_reward = 0
    total_steps = 0
    max_steps = 1000

    for _ in range(max_steps):
        state = env.reset()
        done = False
        episode_reward = 0

        while not done:
            action = train.choose_action(state)
            next_state, reward = env.step(action)
            train.update_q_table(state, action, reward, next_state)
            state = next_state
            episode_reward += reward
            total_steps += 1

            if episode_reward == 1:
                done = True

        total_reward += episode_reward

    return total_reward, total_steps

if __name__ == "__main__":
    train_algorithms = ["TD(0)", "SARSA", "Q-Learning"]
    results = {}

    for algorithm in train_algorithms:
        train_instance = Train(algorithm)
        total_reward, total_steps = train(train_instance)
        results[algorithm] = (total_reward, total_steps)

    print("Results:")
    for algorithm, (total_reward, total_steps) in results.items():
        print(f"{algorithm}: Total Reward = {total_reward}, Total Steps = {total_steps}")